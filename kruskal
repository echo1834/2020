#include<stdio.h>
#include<stdlib.h>
typedef struct { //顶点结构类型定义
	int front,rear; 
	int weight; //权值
	int flag; //标明flag
} bian;
bian T[100]; 
int diT[10]; //顶点数 n，最多 10 个
int c[10]; //记录有效的顶点
void kru(int n,int e,bian *T);
int main() {
	int i;
	int n,e;
	scanf("%d %d",&n,&e);
	printf("顶点 顶点 权值\n");
	for(i=0; i<=e-1; i++) {
		scanf("%d%d%d",&T[i].front,&T[i].rear,&T[i].weight);
		T[i].flag=0;
	}
	kru(n,e,T);
	printf("min weight is:\n");
	int temp=0; 
	for(i=0; i<=n-2; i++) //输出最小生成树
		temp+=T[c[i]].weight;
	printf("%d",temp);
}
void kru(int n,int e,bian *T) {
	int i,j,k,l,min,t,p,kis;
	for(i=0; i<=n-1; i++) 
		diT[i]=i;
	j=0;
	while(j<n-1) { 
		min=100;
		for(i=0; i<=e-1; i++) {
			if(T[i].flag==0) { //搜索权值最小边 
				if(T[i].weight<min) {
					p=i;
					k=T[i].front;
					l=T[i].rear;
					min=T[i].weight;
				}
			}
		}
		T[p].flag=1; //已查找的赋值 
		min=100;
		if(diT[k-1]==diT[l-1]) 
			T[i].flag=2; //无关量赋值=2 
		else {
			c[j]=p; 
			j++;
			kis=diT[l-1];
			for(t=0; t<n; t++) 
				if(diT[t]==kis)
					diT[t]=diT[k-1];
		}
	}
}
